Overview of Code
Class Definitions:
Course: Manages individual course details, including course ID, name, and enrolled students.
CourseManagementSystem: Manages multiple courses, including adding courses, enrolling students, viewing courses, and saving/loading data.
Key Methods:
enroll_student(): Adds a student to a course.
get_details(): Returns the course details as a dictionary.
save_courses(): Saves the course data to a JSON file.
load_courses(): Loads course data from a JSON file.
Data Persistence: The system uses JSON files for saving and loading course data, which is a great way to maintain state between program runs.
Suggestions for Improvement
Error Handling:
You might want to add error handling for scenarios like invalid student names (e.g., duplicates).
Consider adding checks for empty course names or IDs when adding courses.
User Interface:
Implement a simple command-line interface to interact with the CMS, making it more user-friendly.
Allow users to input course details interactively instead of hardcoding them.
Enhancements:
Remove Course: Add functionality to remove a course from the system.
List Enrolled Students: Implement a method to list students enrolled in a specific course.
Course Search: Enable searching for courses by name or ID.
Data Validation:
Ensure that student names do not contain invalid characters or are not empty before enrolling.
Documentation:
Add docstrings to each method for better documentation and clarity on what each method does.
code start:

import json

class Course:
    def __init__(self, course_id, course_name):
        self.course_id = course_id
        self.course_name = course_name
        self.students = []

    def enroll_student(self, student_name):
        """Enroll a student in the course."""
        self.students.append(student_name)

    def get_details(self):
        """Return details about the course."""
        return {
            "course_id": self.course_id,
            "course_name": self.course_name,
            "students": self.students
        }

class CourseManagementSystem:
    def __init__(self, filename='courses.json'):
        self.courses = {}
        self.filename = filename
        self.load_courses()

    def add_course(self, course_id, course_name):
        """Add a new course."""
        if course_id not in self.courses:
            self.courses[course_id] = Course(course_id, course_name)
            print(f"Course '{course_name}' added successfully.")
        else:
            print("Course ID already exists.")

    def enroll_student(self, course_id, student_name):
        """Enroll a student in a specified course."""
        if course_id in self.courses:
            self.courses[course_id].enroll_student(student_name)
            print(f"Student '{student_name}' enrolled in '{self.courses[course_id].course_name}'.")
        else:
            print("Course ID not found.")

    def view_courses(self):
        """Display all courses and their enrolled students."""
        if not self.courses:
            print("No courses available.")
            return
        for course in self.courses.values():
            details = course.get_details()
            print(f"Course ID: {details['course_id']}, Course Name: {details['course_name']}, Students: {', '.join(details['students'])}")

    def save_courses(self):
        """Save all courses to a JSON file."""
        with open(self.filename, 'w') as file:
            json.dump({course_id: course.get_details() for course_id, course in self.courses.items()}, file)

    def load_courses(self):
        """Load courses from a JSON file."""
        try:
            with open(self.filename, 'r') as file:
                courses_data = json.load(file)
                for course_id, data in courses_data.items():
                    course = Course(course_id, data['course_name'])
                    course.students = data['students']
                    self.courses[course_id] = course
        except FileNotFoundError:
            print("No existing course data found. Starting fresh.")

# Example usage
if __name__ == "__main__":
    cms = CourseManagementSystem()
    
    # Add courses
    cms.add_course("CS101", "Introduction to Computer Science")
    cms.add_course("MATH101", "Calculus I")
    
    # Enroll students
    cms.enroll_student("CS101", "Alice")
    cms.enroll_student("CS101", "Bob")
    cms.enroll_student("MATH101", "Charlie")

    # View all courses
    cms.view_courses()

    # Save courses to file
    cms.save_courses()
